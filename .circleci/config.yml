version: 2.1
orbs:
  heroku: circleci/heroku@1.0.1
workflows:
  heroku_deploy:
    jobs:
      - generate_cache
      - build:
          requires:
            - generate_cache
      - deploy-dev:
          requires:
            - build
          filters:
            branches:
              only:
                - develop
      - deploy-pro:
          requires:
            - build
          filters:
            branches:
              only:
                - master

jobs:
  generate_cache:
    machine:
      image: circleci/classic:edge
    steps:
      - checkout
      - restore_cache:
          key: docker-{{ checksum "docker-compose.yml" }}-{{ checksum "Gemfile.lock" }}-{{ checksum "Dockerfile" }}
          paths: ~/caches/images.tar
      - run:
          name: Setup docker
          command: |
            if [ ! -f ~/caches/images.tar ]; then
              docker-compose pull db
              docker-compose build
              mkdir -p ~/caches
              docker save $(docker images | awk 'NR>=2 && ! /^<none>/{print $1}') -o ~/caches/images.tar
            fi
      - save_cache:
          key: docker-{{ checksum "docker-compose.yml" }}-{{ checksum "Gemfile.lock" }}-{{ checksum "Dockerfile" }}
          paths: ~/caches/images.tar
  build:
    machine:
      image: circleci/classic:edge
    steps:
      - checkout
      - restore_cache:
          key: docker-{{ checksum "docker-compose.yml" }}-{{ checksum "Gemfile.lock" }}-{{ checksum "Dockerfile" }}
          paths: ~/caches/images.tar
      - run:
          name: Docker load
          command: |
            if [[ -e ~/caches/images.tar ]]; then
              docker load -i ~/caches/images.tar
            fi
      - run:
          name: Database setup
          command: docker-compose run web rails db:create db:migrate RAILS_ENV=test
      - run:
          name: Run rspec in parallel
          command: |
            mkdir /tmp/test-results
            docker-compose run web bundle exec rspec --profile 10 \
                        --format RspecJunitFormatter \
                        --out /tmp/test_results/rspec.xml \
                        --format progress \
                        $(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)
      - run:
          name: docker-compose down
          command: docker-compose down

      # - run:
      #     name: Database setup
      #     command: bundle exec rails db:schema:load

      # collect reports
      # - store_test_results:
      #     path: /tmp/test-results
      # - store_artifacts:
      #     path: /tmp/test-results
      #     destination: test-results

      # - run:
      #     name: Install reviewdog
      #     command: |
      #       curl -fSL https://github.com/haya14busa/reviewdog/releases/download/$REVIEWDOG_VERSION/reviewdog_linux_amd64 -o reviewdog && chmod +x ./reviewdog

      # - run:
      #     name: Run rubocop & reviewdog
      #     command: bundle exec rubocop | ./reviewdog -f=rubocop -reporter=github-pr-review

  deploy-dev:
    working_directory: /tmp/repo-dev
    docker:
      - image: buildpack-deps:bionic
    executor: heroku/default
    steps:
      - checkout
      - heroku/install
      - run:
          name: Mentenance mode ON
          command: heroku maintenance:on --app $HEROKU_DEV_APP_NAME
      - heroku/deploy-via-git:
          app-name: $HEROKU_DEV_APP_NAME
      - run:
          name: Command run rails db:migrate
          command: heroku run bundle exec rails db:migrate --app $HEROKU_DEV_APP_NAME
      - run:
          name: Command run rails db:seed_fu
          command: |
            heroku run bundle exec rails db:seed_fu \
            FIXTURE_PATH=./db/fixtures/development \
            --app $HEROKU_DEV_APP_NAME
      - run:
          name: Mentenance mode OFF
          command: heroku maintenance:off --app $HEROKU_DEV_APP_NAME

  deploy-pro:
    working_directory: /tmp/repo-pro
    docker:
      - image: buildpack-deps:bionic
    executor: heroku/default
    steps:
      - checkout
      - heroku/install
      - run:
          name: Mentenance mode ON
          command: heroku maintenance:on --app $HEROKU_DEV_APP_NAME
      - heroku/deploy-via-git:
          app-name: $HEROKU_PRO_APP_NAME
      - run:
          name: Command run rails db:migrate
          command: heroku run bundle exec rails db:migrate --app $HEROKU_PRO_APP_NAME
      - run:
          name: Mentenance mode OFF
          command: heroku maintenance:off --app $HEROKU_DEV_APP_NAME
