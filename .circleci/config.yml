version: 2.1
orbs:
  heroku: circleci/heroku@1.0.1
  aws-ecr: circleci/aws-ecr@6.7.1
workflows:
  heroku_deploy:
    jobs:
      - build_and_test
      - deploy-dev:
          requires:
            - build_and_test
          filters:
            branches:
              only:
                - develop
      - deploy-sta:
          requires:
            - build_and_test
          filters:
            branches:
              only:
                - stage

jobs:
  build_and_test:
    machine:
      image: circleci/classic:edge
    steps:
      - checkout
      - restore_cache:
          key: docker-{{ checksum "docker-compose.yml" }}-{{ checksum "Gemfile.lock" }}-{{ checksum "Dockerfile" }}
          paths: ~/caches/images.tar
      - run:
          name: Setup docker-compose
          command: |
            if [ ! -f ~/caches/images.tar ]; then
              docker-compose build
              mkdir -p ~/caches
              docker save $(docker images | awk 'NR>=2 && ! /^<none>/{print $1}') -o ~/caches/images.tar
            else
              docker load -i ~/caches/images.tar
            fi
      - save_cache:
          key: docker-{{ checksum "docker-compose.yml" }}-{{ checksum "Gemfile.lock" }}-{{ checksum "Dockerfile" }}
          paths: ~/caches/images.tar
      - run:
          name: Database setup
          command: docker-compose run web rails db:create db:migrate RAILS_ENV=test
      - run:
          name: Run rspec in parallel
          command: |
            mkdir /tmp/test-results
            docker-compose run web bundle exec rspec --profile 10 \
                        --format RspecJunitFormatter \
                        --out /tmp/test_results/rspec.xml \
                        --format progress \
                        $(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)
      # collect reports
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results
      - run:
          name: Run rubocop
          when: always
          command: docker-compose run web bundle exec rubocop

  deploy-dev:
    working_directory: /tmp/repo-dev
    docker:
      - image: buildpack-deps:bionic
    executor: heroku/default
    steps:
      - checkout
      - heroku/install
      - run:
          name: Mentenance mode ON
          command: heroku maintenance:on --app $HEROKU_DEV_APP_NAME
      - heroku/deploy-via-git:
          app-name: $HEROKU_DEV_APP_NAME
      - run:
          name: Command run rails db:migrate
          command: heroku run bundle exec rails db:migrate --app $HEROKU_DEV_APP_NAME
      - run:
          name: Command run rails db:seed_fu
          command: |
            heroku run bundle exec rails db:seed_fu \
            FIXTURE_PATH=./db/fixtures/development \
            --app $HEROKU_DEV_APP_NAME
      - run:
          name: Mentenance mode OFF
          command: heroku maintenance:off --app $HEROKU_DEV_APP_NAME

  deploy-sta:
    working_directory: /tmp/deploy-sta
    executor: aws-ecr/default
    steps:
      - aws-ecr/build-and-push-image:
          tag: "${CIRCLE_SHA1}"
          repo: "${AWS_ECR_REPO}"
      - run:
          name: Create Dockerrun.aws.json
          command: |
            cat \<<EOF > Dockerrun.aws.json
            {
              "AWSEBDockerrunVersion": "1",
              "Image": {
                "Name": "${AWS_ECR_ACCOUNT_URL}/${AWS_ECR_REPO}:${CIRCLE_SHA1}"
              },
              "Ports": [{ "ContainerPort": "3000" }]
            }
            EOF
      - run:
          name: Zip Dockerrun.aws.json
          command: zip "${CIRCLE_SHA1}.zip" Dockerrun.aws.json
      - run:
          name: Upload zip to S3
          command: aws s3 cp "${CIRCLE_SHA1}.zip" "s3://${AWS_S3_BUCKER_NAME}/bundles/${CIRCLE_SHA1}.zip"
      - run:
          name: Create application versions
          command: |
            aws elasticbeanstalk create-application-version \
            --application-name ${AWS_EB_APP_NAME} --version-label ${CIRCLE_SHA1} \
            --source-bundle S3Bucket="${AWS_S3_BUCKER_NAME}",S3Key="bundles/${CIRCLE_SHA1}.zip"
      - run:
          name: Update environment
          command: |
            aws elasticbeanstalk update-environment \
            --environment-id ${AWS_EB_ENVIRONMENT_ID} --version-label ${CIRCLE_SHA1}
